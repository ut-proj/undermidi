(defmodule um.scale
  (export all))

(defun ->pitch
    ((1) 0)
    (('b2) 1)
    ((2) 2)
    (('|#2|) 3)
    (('b3) 3)
    ((3) 4)
    (('|#3|) 5)
    ((''b4) 4)
    ((4) 5)
    (('|#4|) 6)
    (('b5) 6)
    ((5) 7)
    (('|#5|) 8)
    (('b6) 8)
    ((6) 9)
    (('|#6|) 10)
    (('b7) 10)
    ((7) 11)
    (('|#7|) 12)
    (('b8) 11)
    ((8) 12)
    (('|#8|) 13)
    (('b9) 13)
    ((9) 14)
    (('|#9|) 15)
    (('b10) 15)
    ((10) 16)
    (('|#10|) 17)
    (('b11) 17)
    ((11) 18)
    (('|#11|) 19)
    (('b12) 19)
    ((12) 20)
    (('|#12|) 21)
    (('b13) 21)
    ((13) 22)
    (('|#13|) 23))

(defun midi (scale)
  (midi scale 0))

(defun midi
  ((scale key) (when (is_atom key))
   (midi scale (mref (um.notes:all) key)))
  ((scale key)
   (list-comp ((<- s scale))
     (+ (->pitch s) key))))

(defun get (scale-name start-oct oct-count)
  (get scale-name start-oct oct-count 0))

(defun get (scale-name start-oct oct-count key)
  (let ((scale (midi
                (erlang:apply 'uth.scale scale-name '())
                key))
        (last-oct (- (+ start-oct oct-count) 1)))
    (lists:flatten
     (list
      (list-comp ((<- oct (lists:seq start-oct last-oct)))
        (list-comp ((<- x scale))
          (um:octave x oct)))
      (um:octave (car scale) (+ 1 last-oct))))))
